// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package kip37

import (
	"math/big"
	"strings"

	"github.com/klaytn/klaytn"
	"github.com/klaytn/klaytn/accounts/abi"
	"github.com/klaytn/klaytn/accounts/abi/bind"
	"github.com/klaytn/klaytn/blockchain/types"
	"github.com/klaytn/klaytn/common"
	"github.com/klaytn/klaytn/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = klaytn.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Kip37ABI is the input ABI used to generate the binding from.
const Kip37ABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_initialSupply\",\"type\":\"uint256\"},{\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"accounts\",\"type\":\"address[]\"},{\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"ids\",\"type\":\"uint256[]\"},{\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"operator\",\"type\":\"address\"},{\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creators\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"},{\"name\":\"_toList\",\"type\":\"address[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"name\":\"_values\",\"type\":\"uint256[]\"}],\"name\":\"mintBatch\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"uri\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"}]"

// Kip37BinRuntime is the compiled bytecode used for adding genesis block without deploying code.
const Kip37BinRuntime = ``

// Kip37Bin is the compiled bytecode used for deploying new contracts.
var Kip37Bin = "0x60806040523480156200001157600080fd5b50604051620059ef380380620059ef833981018060405260208110156200003757600080fd5b8101908080516401000000008111156200005057600080fd5b828101905060208101848111156200006757600080fd5b81518560018202830111640100000000821117156200008557600080fd5b505092919050505080620000a66301ffc9a760e01b6200017460201b60201c565b620000b7816200027d60201b60201c565b620000cf636433ca1f60e01b6200017460201b60201c565b620000e7630e89341c60e01b6200017460201b60201c565b5062000100639e094e9e60e01b6200017460201b60201c565b62000111336200029960201b60201c565b6000600660006101000a81548160ff02191690831515021790555062000144630e8ffdb760e01b6200017460201b60201c565b6200015533620002fa60201b60201c565b6200016d63dfd9d9ec60e01b6200017460201b60201c565b50620005ce565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000211576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4b495031333a20696e76616c696420696e74657266616365206964000000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b8060049080519060200190620002959291906200051f565b5050565b620002b48160056200035b60201b62004eed1790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b620003158160086200035b60201b62004eed1790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b6200036d82826200043f60201b60201c565b15620003e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620004c8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180620059cd6022913960400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200056257805160ff191683800117855562000593565b8280016001018555821562000593579182015b828111156200059257825182559160200191906001019062000575565b5b509050620005a29190620005a6565b5090565b620005cb91905b80821115620005c7576000816000905550600101620005ad565b5090565b90565b6153ef80620005de6000396000f3fe608060405234801561001057600080fd5b50600436106101c25760003560e01c8063836a1040116100f9578063cd53d08e11610097578063e985e9c511610071578063e985e9c514610f64578063f242432a14610fe0578063f5298aca146110ef578063fabc1cbc14611147576101c2565b8063cd53d08e14610c34578063cfa84fc114610ca2578063d81d0a1514610df8576101c2565b806398650275116100d35780639865027514610b3c578063a22cb46514610b46578063aa271e1a14610b96578063bd85b03914610bf2576101c2565b8063836a104014610a965780638456cb5914610aee578063983b2d5614610af8576101c2565b806346fbf68e116101665780635c975abb116101405780635c975abb146108ba5780636b20c454146108dc5780636ef8d66d14610a4857806382dc1ec414610a52576101c2565b806346fbf68e146105d65780634b068c78146106325780634e1273f414610719576101c2565b80630e89341c116101a25780630e89341c146102d4578063136439dd1461037b5780632eb2c2d6146103a95780633f4ba83a146105cc576101c2565b8062dde10e146101c7578062fdd58e1461020d57806301ffc9a71461026f575b600080fd5b6101f3600480360360208110156101dd57600080fd5b8101908080359060200190929190505050611175565b604051808215151515815260200191505060405180910390f35b6102596004803603604081101561022357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061119f565b6040518082815260200191505060405180910390f35b6102ba6004803603602081101561028557600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019092919050505061127f565b604051808215151515815260200191505060405180910390f35b610300600480360360208110156102ea57600080fd5b81019080803590602001909291905050506112e6565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610340578082015181840152602081019050610325565b50505050905090810190601f16801561036d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103a76004803603602081101561039157600080fd5b810190808035906020019092919050505061144d565b005b6105ca600480360360a08110156103bf57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561041c57600080fd5b82018360208201111561042e57600080fd5b8035906020019184602083028401116401000000008311171561045057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156104b057600080fd5b8201836020820111156104c257600080fd5b803590602001918460208302840111640100000000831117156104e457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561054457600080fd5b82018360208201111561055657600080fd5b8035906020019184600183028401116401000000008311171561057857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506115df565b005b6105d4611ac2565b005b610618600480360360208110156105ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611c22565b604051808215151515815260200191505060405180910390f35b6106ff6004803603606081101561064857600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561067957600080fd5b82018360208201111561068b57600080fd5b803590602001918460018302840111640100000000831117156106ad57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611c3f565b604051808215151515815260200191505060405180910390f35b6108636004803603604081101561072f57600080fd5b810190808035906020019064010000000081111561074c57600080fd5b82018360208201111561075e57600080fd5b8035906020019184602083028401116401000000008311171561078057600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156107e057600080fd5b8201836020820111156107f257600080fd5b8035906020019184602083028401116401000000008311171561081457600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050611e5f565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108a657808201518184015260208101905061088b565b505050509050019250505060405180910390f35b6108c261203d565b604051808215151515815260200191505060405180910390f35b610a46600480360360608110156108f257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561092f57600080fd5b82018360208201111561094157600080fd5b8035906020019184602083028401116401000000008311171561096357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156109c357600080fd5b8201836020820111156109d557600080fd5b803590602001918460208302840111640100000000831117156109f757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612054565b005b610a50612107565b005b610a9460048036036020811015610a6857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612112565b005b610aec60048036036060811015610aac57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061217c565b005b610af6612275565b005b610b3a60048036036020811015610b0e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506123d6565b005b610b44612440565b005b610b9460048036036040811015610b5c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061244b565b005b610bd860048036036020811015610bac57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506125e6565b604051808215151515815260200191505060405180910390f35b610c1e60048036036020811015610c0857600080fd5b8101908080359060200190929190505050612603565b6040518082815260200191505060405180910390f35b610c6060048036036020811015610c4a57600080fd5b8101908080359060200190929190505050612620565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610df660048036036060811015610cb857600080fd5b810190808035906020019092919080359060200190640100000000811115610cdf57600080fd5b820183602082011115610cf157600080fd5b80359060200191846020830284011164010000000083111715610d1357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610d7357600080fd5b820183602082011115610d8557600080fd5b80359060200191846020830284011164010000000083111715610da757600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050612653565b005b610f6260048036036060811015610e0e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190640100000000811115610e4b57600080fd5b820183602082011115610e5d57600080fd5b80359060200191846020830284011164010000000083111715610e7f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610edf57600080fd5b820183602082011115610ef157600080fd5b80359060200191846020830284011164010000000083111715610f1357600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505091929192905050506127f3565b005b610fc660048036036040811015610f7a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061291a565b604051808215151515815260200191505060405180910390f35b6110ed600480360360a0811015610ff657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019064010000000081111561106757600080fd5b82018360208201111561107957600080fd5b8035906020019184600183028401116401000000008311171561109b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506129ae565b005b6111456004803603606081101561110557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050612d78565b005b6111736004803603602081101561115d57600080fd5b8101908080359060200190929190505050612e2b565b005b60006007600083815260200190815260200160002060009054906101000a900460ff169050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611226576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806151086029913960400191505060405180910390fd5b6001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606080600a60008481526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113905780601f1061136557610100808354040283529160200191611390565b820191906000526020600020905b81548152906001019060200180831161137357829003601f168201915b5050505050905060008151146113a95780915050611448565b60048054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561143f5780601f106114145761010080835404028352916020019161143f565b820191906000526020600020905b81548152906001019060200180831161142257829003601f168201915b50505050509150505b919050565b61145633611c22565b6114ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806150956030913960400191505060405180910390fd5b600015156007600083815260200190815260200160002060009054906101000a900460ff16151514611545576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4b495033375061757361626c653a20616c72656164792070617573656400000081525060200191505060405180910390fd5b60016007600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507fabdb1c9133626eb4f8c5f2ec7e3c60a969a2fb148a0c341a3cf6597242c8f8f58133604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b8151835114611639576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806151816026913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156116bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061531a6023913960400191505060405180910390fd5b6116c7612fbd565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148061170d575061170c85611707612fbd565b61291a565b5b611762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806151a76030913960400191505060405180910390fd5b600061176c612fbd565b905061177c818787878787612fc5565b60008090505b845181101561195057600085828151811061179957fe5b6020026020010151905060008583815181106117b157fe5b60200260200101519050611838816040518060600160405280602881526020016151d7602891396001600086815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546130d89092919063ffffffff16565b6001600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506118ef816001600085815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461319890919063ffffffff16565b6001600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050806001019050611782565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015611a005780820151818401526020810190506119e5565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015611a42578082015181840152602081019050611a27565b5050505090500194505050505060405180910390a4611a65818787878787613220565b611aba576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061533d6036913960400191505060405180910390fd5b505050505050565b611acb33611c22565b611b20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806150956030913960400191505060405180910390fd5b600660009054906101000a900460ff16611ba2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600660006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6000611c3882600561389890919063ffffffff16565b9050919050565b6000611c4a336125e6565b611c9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806151ff6030913960400191505060405180910390fd5b611ca884613976565b15611d1b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4b495033373a20746f6b656e20616c726561647920637265617465640000000081525060200191505060405180910390fd5b336009600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611d88338585604051806020016040528060008152506139e8565b600082511115611e585781600a60008681526020019081526020016000209080519060200190611db9929190614fc8565b50837f6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b836040518080602001828103825283818151815260200191508051906020019080838360005b83811015611e1d578082015181840152602081019050611e02565b50505050905090810190601f168015611e4a5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25b9392505050565b60608151835114611ebb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061506e6027913960400191505060405180910390fd5b60608351604051908082528060200260200182016040528015611eed5781602001602082028038833980820191505090505b50905060008090505b845181101561203257600073ffffffffffffffffffffffffffffffffffffffff16858281518110611f2357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415611f98576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180615373602f913960400191505060405180910390fd5b60016000858381518110611fa857fe5b602002602001015181526020019081526020016000206000868381518110611fcc57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061201b57fe5b602002602001018181525050806001019050611ef6565b508091505092915050565b6000600660009054906101000a900460ff16905090565b61205c612fbd565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806120a257506120a18361209c612fbd565b61291a565b5b6120f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806152f36027913960400191505060405180910390fd5b612102838383613c9a565b505050565b61211033614068565b565b61211b33611c22565b612170576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806150956030913960400191505060405180910390fd5b612179816140c2565b50565b612185336125e6565b6121da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806151ff6030913960400191505060405180910390fd5b6121e383613976565b612255576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4b495033373a206e6f6e6578697374656e7420746f6b656e000000000000000081525060200191505060405180910390fd5b612270828483604051806020016040528060008152506139e8565b505050565b61227e33611c22565b6122d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806150956030913960400191505060405180910390fd5b600660009054906101000a900460ff1615612356576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600660006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25833604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b6123df336125e6565b612434576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806151ff6030913960400191505060405180910390fd5b61243d8161411c565b50565b61244933614176565b565b8173ffffffffffffffffffffffffffffffffffffffff1661246a612fbd565b73ffffffffffffffffffffffffffffffffffffffff1614156124d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602781526020018061527a6027913960400191505060405180910390fd5b80600260006124e4612fbd565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16612591612fbd565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b60006125fc82600861389890919063ffffffff16565b9050919050565b600060036000838152602001908152602001600020549050919050565b60096020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61265c336125e6565b6126b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806151ff6030913960400191505060405180910390fd5b6126ba83613976565b61272c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4b495033373a206e6f6e6578697374656e7420746f6b656e000000000000000081525060200191505060405180910390fd5b8051825114612786576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806151586029913960400191505060405180910390fd5b60008090505b82518110156127ed5760008382815181106127a357fe5b6020026020010151905060008383815181106127bb57fe5b602002602001015190506127e0828783604051806020016040528060008152506139e8565b505080600101905061278c565b50505050565b6127fc336125e6565b612851576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806151ff6030913960400191505060405180910390fd5b60008090505b82518110156128f95761287c83828151811061286f57fe5b6020026020010151613976565b6128ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4b495033373a206e6f6e6578697374656e7420746f6b656e000000000000000081525060200191505060405180910390fd5b806001019050612857565b50612915838383604051806020016040528060008152506141d0565b505050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415612a34576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602381526020018061531a6023913960400191505060405180910390fd5b612a3c612fbd565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480612a825750612a8185612a7c612fbd565b61291a565b5b612ad7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806152f36027913960400191505060405180910390fd5b6000612ae1612fbd565b9050612b01818787612af2886145dd565b612afb886145dd565b87612fc5565b612b7e836040518060600160405280602881526020016151d7602891396001600088815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546130d89092919063ffffffff16565b6001600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550612c35836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461319890919063ffffffff16565b6001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051808381526020018281526020019250505060405180910390a4612d1b818787878787614636565b612d70576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806152c36030913960400191505060405180910390fd5b505050505050565b612d80612fbd565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612dc65750612dc583612dc0612fbd565b61291a565b5b612e1b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806152f36027913960400191505060405180910390fd5b612e26838383614baa565b505050565b612e3433611c22565b612e89576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806150956030913960400191505060405180910390fd5b600115156007600083815260200190815260200160002060009054906101000a900460ff16151514612f23576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4b495033375061757361626c653a20616c726561647920756e7061757365640081525060200191505060405180910390fd5b60006007600083815260200190815260200160002060006101000a81548160ff0219169083151502179055507ffe9b5e5216db9de81757f43d20f846bea509c040a560d136b8263dd8cd7642388133604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a150565b600033905090565b612fcd61203d565b15613023576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615250602a913960400191505060405180910390fd5b60008090505b83518110156130cf57600015156007600086848151811061304657fe5b6020026020010151815260200190815260200160002060009054906101000a900460ff161515146130c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806153a26022913960400191505060405180910390fd5b8080600101915050613029565b50505050505050565b6000838311158290613185576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561314a57808201518184015260208101905061312f565b50505050905090810190601f1680156131775780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015613216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b60008060606132448773ffffffffffffffffffffffffffffffffffffffff16614e1d565b6132535760019250505061388e565b8673ffffffffffffffffffffffffffffffffffffffff1663bc197c8160e01b8a8a898989604051602401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561332957808201518184015260208101905061330e565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561336b578082015181840152602081019050613350565b50505050905001848103825285818151815260200191508051906020019080838360005b838110156133aa57808201518184015260208101905061338f565b50505050905090810190601f1680156133d75780820380516001836020036101000a031916815260200191505b5098505050505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310613472578051825260208201915060208101905060208303925061344f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146134d4576040519150601f19603f3d011682016040523d82523d6000602084013e6134d9565b606091505b508092508193505050600081511415801561355d575063bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681806020019051602081101561352b57600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561356d5760019250505061388e565b8673ffffffffffffffffffffffffffffffffffffffff16639b49e33260e01b8a8a898989604051602401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b83811015613643578082015181840152602081019050613628565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561368557808201518184015260208101905061366a565b50505050905001848103825285818151815260200191508051906020019080838360005b838110156136c45780820151818401526020810190506136a9565b50505050905090810190601f1680156136f15780820380516001836020036101000a031916815260200191505b5098505050505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061378c5780518252602082019150602081019050602083039250613769565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146137ee576040519150601f19603f3d011682016040523d82523d6000602084013e6137f3565b606091505b50809250819350505060008151141580156138775750639b49e33260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191681806020019051602081101561384557600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b156138875760019250505061388e565b6000925050505b9695505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561391f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806152a16022913960400191505060405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000806009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415613a8b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4b495033373a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b6000613a95612fbd565b9050613ab681600087613aa7886145dd565b613ab0886145dd565b87612fc5565b613b19836001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461319890919063ffffffff16565b6001600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613b9383600360008781526020019081526020016000205461319890919063ffffffff16565b60036000868152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051808381526020018281526020019250505060405180910390a4613c3e81600087878787614636565b613c93576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806152c36030913960400191505060405180910390fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613d20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806150e76021913960400191505060405180910390fd5b8051825114613d7a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806151816026913960400191505060405180910390fd5b6000613d84612fbd565b9050613da481856000868660405180602001604052806000815250612fc5565b60008090505b8351811015613f5a57613e56838281518110613dc257fe5b60200260200101516040518060600160405280602281526020016150c56022913960016000888681518110613df357fe5b6020026020010151815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546130d89092919063ffffffff16565b60016000868481518110613e6657fe5b6020026020010151815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613f23838281518110613ecc57fe5b60200260200101516040518060600160405280602781526020016151316027913960036000888681518110613efd57fe5b60200260200101518152602001908152602001600020546130d89092919063ffffffff16565b60036000868481518110613f3357fe5b60200260200101518152602001908152602001600020819055508080600101915050613daa565b50600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561400b578082015181840152602081019050613ff0565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561404d578082015181840152602081019050614032565b5050505090500194505050505060405180910390a450505050565b61407c816005614e3090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e60405160405180910390a250565b6140d6816005614eed90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f860405160405180910390a250565b614130816008614eed90919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f660405160405180910390a250565b61418a816008614e3090919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb6669260405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415614273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f4b495033373a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b81518351146142cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806151816026913960400191505060405180910390fd5b60006142d7612fbd565b90506142e881600087878787612fc5565b60008090505b845181101561446a576143806001600087848151811061430a57fe5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205485838151811061436a57fe5b602002602001015161319890919063ffffffff16565b6001600087848151811061439057fe5b6020026020010151815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614433600360008784815181106143fa57fe5b602002602001015181526020019081526020016000205485838151811061441d57fe5b602002602001015161319890919063ffffffff16565b6003600087848151811061444357fe5b602002602001015181526020019081526020016000208190555080806001019150506142ee565b508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561451b578082015181840152602081019050614500565b50505050905001838103825284818151815260200191508051906020019060200280838360005b8381101561455d578082015181840152602081019050614542565b5050505090500194505050505060405180910390a461458181600087878787613220565b6145d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061533d6036913960400191505060405180910390fd5b5050505050565b60608060016040519080825280602002602001820160405280156146105781602001602082028038833980820191505090505b509050828160008151811061462157fe5b60200260200101818152505080915050919050565b600080606061465a8773ffffffffffffffffffffffffffffffffffffffff16614e1d565b61466957600192505050614ba0565b8673ffffffffffffffffffffffffffffffffffffffff1663f23a6e6160e01b8a8a898989604051602401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015614740578082015181840152602081019050614725565b50505050905090810190601f16801561476d5780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061480657805182526020820191506020810190506020830392506147e3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614868576040519150601f19603f3d011682016040523d82523d6000602084013e61486d565b606091505b50809250819350505060008151141580156148f1575063f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168180602001905160208110156148bf57600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561490157600192505050614ba0565b8673ffffffffffffffffffffffffffffffffffffffff1663e78b332560e01b8a8a898989604051602401808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156149d85780820151818401526020810190506149bd565b50505050905090810190601f168015614a055780820380516001836020036101000a031916815260200191505b509650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310614a9e5780518252602082019150602081019050602083039250614a7b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114614b00576040519150601f19603f3d011682016040523d82523d6000602084013e614b05565b606091505b5080925081935050506000815114158015614b89575063e78b332560e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190516020811015614b5757600080fd5b81019080805190602001909291905050507bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b15614b9957600192505050614ba0565b6000925050505b9695505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614c30576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806150e76021913960400191505060405180910390fd5b6000614c3a612fbd565b9050614c6a81856000614c4c876145dd565b614c55876145dd565b60405180602001604052806000815250612fc5565b614ce7826040518060600160405280602281526020016150c5602291396001600087815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546130d89092919063ffffffff16565b6001600085815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550614d7b826040518060600160405280602781526020016151316027913960036000878152602001908152602001600020546130d89092919063ffffffff16565b6003600085815260200190815260200160002081905550600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628686604051808381526020018281526020019250505060405180910390a450505050565b600080823b905060008111915050919050565b614e3a8282613898565b614e8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061522f6021913960400191505060405180910390fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b614ef78282613898565b15614f6a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650081525060200191505060405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061500957805160ff1916838001178555615037565b82800160010185558215615037579182015b8281111561503657825182559160200191906001019061501b565b5b5090506150449190615048565b5090565b61506a91905b8082111561506657600081600090555060010161504e565b5090565b9056fe4b495033373a206163636f756e747320616e6420696473206c656e677468206d69736d61746368506175736572526f6c653a2063616c6c657220646f6573206e6f742068617665207468652050617573657220726f6c654b495033373a206275726e20616d6f756e7420657863656564732062616c616e63654b495033373a206275726e2066726f6d20746865207a65726f20616464726573734b495033373a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734b495033373a206275726e20616d6f756e74206578636565647320746f74616c20737570706c794b495033373a20746f4c69737420616e64205f76616c756573206c656e677468206d69736d617463684b495033373a2069647320616e6420616d6f756e7473206c656e677468206d69736d617463684b495033373a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644b495033373a20696e73756666696369656e742062616c616e636520666f72207472616e736665724d696e746572526f6c653a2063616c6c657220646f6573206e6f74206861766520746865204d696e74657220726f6c65526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c654b495033375061757361626c653a20746f6b656e207472616e73666572207768696c65207061757365644b495033373a2073657474696e6720617070726f76616c2073746174757320666f722073656c66526f6c65733a206163636f756e7420697320746865207a65726f20616464726573734b495033373a207472616e7366657220746f206e6f6e204b49503337526563656976657220696d706c656d656e7465724b495033373a2063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f7665644b495033373a207472616e7366657220746f20746865207a65726f20616464726573734b495033373a206261746368207472616e7366657220746f206e6f6e204b49503337526563656976657220696d706c656d656e7465724b495033373a2062617463682062616c616e636520717565727920666f7220746865207a65726f20616464726573734b495033375061757361626c653a2074686520746f6b656e20697320706175736564a165627a7a723058208a6a0716d3baa0611c25e3d8e7ca71365dded98d010f68d262a2076be2e76e190029526f6c65733a206163636f756e7420697320746865207a65726f2061646472657373"

// DeployKip37 deploys a new Klaytn contract, binding an instance of Kip37 to it.
func DeployKip37(auth *bind.TransactOpts, backend bind.ContractBackend, uri string) (common.Address, *types.Transaction, *Kip37, error) {
	parsed, err := abi.JSON(strings.NewReader(Kip37ABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(Kip37Bin), backend, uri)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Kip37{Kip37Caller: Kip37Caller{contract: contract}, Kip37Transactor: Kip37Transactor{contract: contract}, Kip37Filterer: Kip37Filterer{contract: contract}}, nil
}

// Kip37 is an auto generated Go binding around a Klaytn contract.
type Kip37 struct {
	Kip37Caller     // Read-only binding to the contract
	Kip37Transactor // Write-only binding to the contract
	Kip37Filterer   // Log filterer for contract events
}

// Kip37Caller is an auto generated read-only Go binding around a Klaytn contract.
type Kip37Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Kip37Transactor is an auto generated write-only Go binding around a Klaytn contract.
type Kip37Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Kip37Filterer is an auto generated log filtering Go binding around a Klaytn contract events.
type Kip37Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Kip37Session is an auto generated Go binding around a Klaytn contract,
// with pre-set call and transact options.
type Kip37Session struct {
	Contract     *Kip37            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Kip37CallerSession is an auto generated read-only Go binding around a Klaytn contract,
// with pre-set call options.
type Kip37CallerSession struct {
	Contract *Kip37Caller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// Kip37TransactorSession is an auto generated write-only Go binding around a Klaytn contract,
// with pre-set transact options.
type Kip37TransactorSession struct {
	Contract     *Kip37Transactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Kip37Raw is an auto generated low-level Go binding around a Klaytn contract.
type Kip37Raw struct {
	Contract *Kip37 // Generic contract binding to access the raw methods on
}

// Kip37CallerRaw is an auto generated low-level read-only Go binding around a Klaytn contract.
type Kip37CallerRaw struct {
	Contract *Kip37Caller // Generic read-only contract binding to access the raw methods on
}

// Kip37TransactorRaw is an auto generated low-level write-only Go binding around a Klaytn contract.
type Kip37TransactorRaw struct {
	Contract *Kip37Transactor // Generic write-only contract binding to access the raw methods on
}

// NewKip37 creates a new instance of Kip37, bound to a specific deployed contract.
func NewKip37(address common.Address, backend bind.ContractBackend) (*Kip37, error) {
	contract, err := bindKip37(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Kip37{Kip37Caller: Kip37Caller{contract: contract}, Kip37Transactor: Kip37Transactor{contract: contract}, Kip37Filterer: Kip37Filterer{contract: contract}}, nil
}

// NewKip37Caller creates a new read-only instance of Kip37, bound to a specific deployed contract.
func NewKip37Caller(address common.Address, caller bind.ContractCaller) (*Kip37Caller, error) {
	contract, err := bindKip37(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Kip37Caller{contract: contract}, nil
}

// NewKip37Transactor creates a new write-only instance of Kip37, bound to a specific deployed contract.
func NewKip37Transactor(address common.Address, transactor bind.ContractTransactor) (*Kip37Transactor, error) {
	contract, err := bindKip37(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Kip37Transactor{contract: contract}, nil
}

// NewKip37Filterer creates a new log filterer instance of Kip37, bound to a specific deployed contract.
func NewKip37Filterer(address common.Address, filterer bind.ContractFilterer) (*Kip37Filterer, error) {
	contract, err := bindKip37(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Kip37Filterer{contract: contract}, nil
}

// bindKip37 binds a generic wrapper to an already deployed contract.
func bindKip37(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Kip37ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Kip37 *Kip37Raw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Kip37.Contract.Kip37Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Kip37 *Kip37Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kip37.Contract.Kip37Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Kip37 *Kip37Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Kip37.Contract.Kip37Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Kip37 *Kip37CallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Kip37.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Kip37 *Kip37TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kip37.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Kip37 *Kip37TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Kip37.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Kip37 *Kip37Caller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "balanceOf", account, id)
	return *ret0, err
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Kip37 *Kip37Session) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Kip37.Contract.BalanceOf(&_Kip37.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_Kip37 *Kip37CallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _Kip37.Contract.BalanceOf(&_Kip37.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Kip37 *Kip37Caller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var (
		ret0 = new([]*big.Int)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "balanceOfBatch", accounts, ids)
	return *ret0, err
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Kip37 *Kip37Session) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Kip37.Contract.BalanceOfBatch(&_Kip37.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_Kip37 *Kip37CallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _Kip37.Contract.BalanceOfBatch(&_Kip37.CallOpts, accounts, ids)
}

// Creators is a free data retrieval call binding the contract method 0xcd53d08e.
//
// Solidity: function creators(uint256 ) view returns(address)
func (_Kip37 *Kip37Caller) Creators(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "creators", arg0)
	return *ret0, err
}

// Creators is a free data retrieval call binding the contract method 0xcd53d08e.
//
// Solidity: function creators(uint256 ) view returns(address)
func (_Kip37 *Kip37Session) Creators(arg0 *big.Int) (common.Address, error) {
	return _Kip37.Contract.Creators(&_Kip37.CallOpts, arg0)
}

// Creators is a free data retrieval call binding the contract method 0xcd53d08e.
//
// Solidity: function creators(uint256 ) view returns(address)
func (_Kip37 *Kip37CallerSession) Creators(arg0 *big.Int) (common.Address, error) {
	return _Kip37.Contract.Creators(&_Kip37.CallOpts, arg0)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Kip37 *Kip37Caller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "isApprovedForAll", account, operator)
	return *ret0, err
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Kip37 *Kip37Session) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Kip37.Contract.IsApprovedForAll(&_Kip37.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_Kip37 *Kip37CallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _Kip37.Contract.IsApprovedForAll(&_Kip37.CallOpts, account, operator)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_Kip37 *Kip37Caller) IsMinter(opts *bind.CallOpts, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "isMinter", account)
	return *ret0, err
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_Kip37 *Kip37Session) IsMinter(account common.Address) (bool, error) {
	return _Kip37.Contract.IsMinter(&_Kip37.CallOpts, account)
}

// IsMinter is a free data retrieval call binding the contract method 0xaa271e1a.
//
// Solidity: function isMinter(address account) view returns(bool)
func (_Kip37 *Kip37CallerSession) IsMinter(account common.Address) (bool, error) {
	return _Kip37.Contract.IsMinter(&_Kip37.CallOpts, account)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_Kip37 *Kip37Caller) IsPauser(opts *bind.CallOpts, account common.Address) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "isPauser", account)
	return *ret0, err
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_Kip37 *Kip37Session) IsPauser(account common.Address) (bool, error) {
	return _Kip37.Contract.IsPauser(&_Kip37.CallOpts, account)
}

// IsPauser is a free data retrieval call binding the contract method 0x46fbf68e.
//
// Solidity: function isPauser(address account) view returns(bool)
func (_Kip37 *Kip37CallerSession) IsPauser(account common.Address) (bool, error) {
	return _Kip37.Contract.IsPauser(&_Kip37.CallOpts, account)
}

// Paused is a free data retrieval call binding the contract method 0x00dde10e.
//
// Solidity: function paused(uint256 _id) view returns(bool)
func (_Kip37 *Kip37Caller) Paused(opts *bind.CallOpts, _id *big.Int) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "paused", _id)
	return *ret0, err
}

// Paused is a free data retrieval call binding the contract method 0x00dde10e.
//
// Solidity: function paused(uint256 _id) view returns(bool)
func (_Kip37 *Kip37Session) Paused(_id *big.Int) (bool, error) {
	return _Kip37.Contract.Paused(&_Kip37.CallOpts, _id)
}

// Paused is a free data retrieval call binding the contract method 0x00dde10e.
//
// Solidity: function paused(uint256 _id) view returns(bool)
func (_Kip37 *Kip37CallerSession) Paused(_id *big.Int) (bool, error) {
	return _Kip37.Contract.Paused(&_Kip37.CallOpts, _id)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Kip37 *Kip37Caller) Paused0(opts *bind.CallOpts) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "paused0")
	return *ret0, err
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Kip37 *Kip37Session) Paused0() (bool, error) {
	return _Kip37.Contract.Paused0(&_Kip37.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_Kip37 *Kip37CallerSession) Paused0() (bool, error) {
	return _Kip37.Contract.Paused0(&_Kip37.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Kip37 *Kip37Caller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var (
		ret0 = new(bool)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "supportsInterface", interfaceId)
	return *ret0, err
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Kip37 *Kip37Session) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Kip37.Contract.SupportsInterface(&_Kip37.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_Kip37 *Kip37CallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _Kip37.Contract.SupportsInterface(&_Kip37.CallOpts, interfaceId)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 _tokenId) view returns(uint256)
func (_Kip37 *Kip37Caller) TotalSupply(opts *bind.CallOpts, _tokenId *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "totalSupply", _tokenId)
	return *ret0, err
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 _tokenId) view returns(uint256)
func (_Kip37 *Kip37Session) TotalSupply(_tokenId *big.Int) (*big.Int, error) {
	return _Kip37.Contract.TotalSupply(&_Kip37.CallOpts, _tokenId)
}

// TotalSupply is a free data retrieval call binding the contract method 0xbd85b039.
//
// Solidity: function totalSupply(uint256 _tokenId) view returns(uint256)
func (_Kip37 *Kip37CallerSession) TotalSupply(_tokenId *big.Int) (*big.Int, error) {
	return _Kip37.Contract.TotalSupply(&_Kip37.CallOpts, _tokenId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_Kip37 *Kip37Caller) Uri(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var (
		ret0 = new(string)
	)
	out := ret0
	err := _Kip37.contract.Call(opts, out, "uri", tokenId)
	return *ret0, err
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_Kip37 *Kip37Session) Uri(tokenId *big.Int) (string, error) {
	return _Kip37.Contract.Uri(&_Kip37.CallOpts, tokenId)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 tokenId) view returns(string)
func (_Kip37 *Kip37CallerSession) Uri(tokenId *big.Int) (string, error) {
	return _Kip37.Contract.Uri(&_Kip37.CallOpts, tokenId)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_Kip37 *Kip37Transactor) AddMinter(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "addMinter", account)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_Kip37 *Kip37Session) AddMinter(account common.Address) (*types.Transaction, error) {
	return _Kip37.Contract.AddMinter(&_Kip37.TransactOpts, account)
}

// AddMinter is a paid mutator transaction binding the contract method 0x983b2d56.
//
// Solidity: function addMinter(address account) returns()
func (_Kip37 *Kip37TransactorSession) AddMinter(account common.Address) (*types.Transaction, error) {
	return _Kip37.Contract.AddMinter(&_Kip37.TransactOpts, account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_Kip37 *Kip37Transactor) AddPauser(opts *bind.TransactOpts, account common.Address) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "addPauser", account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_Kip37 *Kip37Session) AddPauser(account common.Address) (*types.Transaction, error) {
	return _Kip37.Contract.AddPauser(&_Kip37.TransactOpts, account)
}

// AddPauser is a paid mutator transaction binding the contract method 0x82dc1ec4.
//
// Solidity: function addPauser(address account) returns()
func (_Kip37 *Kip37TransactorSession) AddPauser(account common.Address) (*types.Transaction, error) {
	return _Kip37.Contract.AddPauser(&_Kip37.TransactOpts, account)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_Kip37 *Kip37Transactor) Burn(opts *bind.TransactOpts, account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "burn", account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_Kip37 *Kip37Session) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Burn(&_Kip37.TransactOpts, account, id, value)
}

// Burn is a paid mutator transaction binding the contract method 0xf5298aca.
//
// Solidity: function burn(address account, uint256 id, uint256 value) returns()
func (_Kip37 *Kip37TransactorSession) Burn(account common.Address, id *big.Int, value *big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Burn(&_Kip37.TransactOpts, account, id, value)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_Kip37 *Kip37Transactor) BurnBatch(opts *bind.TransactOpts, account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "burnBatch", account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_Kip37 *Kip37Session) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.BurnBatch(&_Kip37.TransactOpts, account, ids, values)
}

// BurnBatch is a paid mutator transaction binding the contract method 0x6b20c454.
//
// Solidity: function burnBatch(address account, uint256[] ids, uint256[] values) returns()
func (_Kip37 *Kip37TransactorSession) BurnBatch(account common.Address, ids []*big.Int, values []*big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.BurnBatch(&_Kip37.TransactOpts, account, ids, values)
}

// Create is a paid mutator transaction binding the contract method 0x4b068c78.
//
// Solidity: function create(uint256 _id, uint256 _initialSupply, string _uri) returns(bool)
func (_Kip37 *Kip37Transactor) Create(opts *bind.TransactOpts, _id *big.Int, _initialSupply *big.Int, _uri string) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "create", _id, _initialSupply, _uri)
}

// Create is a paid mutator transaction binding the contract method 0x4b068c78.
//
// Solidity: function create(uint256 _id, uint256 _initialSupply, string _uri) returns(bool)
func (_Kip37 *Kip37Session) Create(_id *big.Int, _initialSupply *big.Int, _uri string) (*types.Transaction, error) {
	return _Kip37.Contract.Create(&_Kip37.TransactOpts, _id, _initialSupply, _uri)
}

// Create is a paid mutator transaction binding the contract method 0x4b068c78.
//
// Solidity: function create(uint256 _id, uint256 _initialSupply, string _uri) returns(bool)
func (_Kip37 *Kip37TransactorSession) Create(_id *big.Int, _initialSupply *big.Int, _uri string) (*types.Transaction, error) {
	return _Kip37.Contract.Create(&_Kip37.TransactOpts, _id, _initialSupply, _uri)
}

// Mint is a paid mutator transaction binding the contract method 0x836a1040.
//
// Solidity: function mint(uint256 _id, address _to, uint256 _value) returns()
func (_Kip37 *Kip37Transactor) Mint(opts *bind.TransactOpts, _id *big.Int, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "mint", _id, _to, _value)
}

// Mint is a paid mutator transaction binding the contract method 0x836a1040.
//
// Solidity: function mint(uint256 _id, address _to, uint256 _value) returns()
func (_Kip37 *Kip37Session) Mint(_id *big.Int, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Mint(&_Kip37.TransactOpts, _id, _to, _value)
}

// Mint is a paid mutator transaction binding the contract method 0x836a1040.
//
// Solidity: function mint(uint256 _id, address _to, uint256 _value) returns()
func (_Kip37 *Kip37TransactorSession) Mint(_id *big.Int, _to common.Address, _value *big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Mint(&_Kip37.TransactOpts, _id, _to, _value)
}

// Mint0 is a paid mutator transaction binding the contract method 0xcfa84fc1.
//
// Solidity: function mint(uint256 _id, address[] _toList, uint256[] _values) returns()
func (_Kip37 *Kip37Transactor) Mint0(opts *bind.TransactOpts, _id *big.Int, _toList []common.Address, _values []*big.Int) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "mint0", _id, _toList, _values)
}

// Mint0 is a paid mutator transaction binding the contract method 0xcfa84fc1.
//
// Solidity: function mint(uint256 _id, address[] _toList, uint256[] _values) returns()
func (_Kip37 *Kip37Session) Mint0(_id *big.Int, _toList []common.Address, _values []*big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Mint0(&_Kip37.TransactOpts, _id, _toList, _values)
}

// Mint0 is a paid mutator transaction binding the contract method 0xcfa84fc1.
//
// Solidity: function mint(uint256 _id, address[] _toList, uint256[] _values) returns()
func (_Kip37 *Kip37TransactorSession) Mint0(_id *big.Int, _toList []common.Address, _values []*big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Mint0(&_Kip37.TransactOpts, _id, _toList, _values)
}

// MintBatch is a paid mutator transaction binding the contract method 0xd81d0a15.
//
// Solidity: function mintBatch(address _to, uint256[] _ids, uint256[] _values) returns()
func (_Kip37 *Kip37Transactor) MintBatch(opts *bind.TransactOpts, _to common.Address, _ids []*big.Int, _values []*big.Int) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "mintBatch", _to, _ids, _values)
}

// MintBatch is a paid mutator transaction binding the contract method 0xd81d0a15.
//
// Solidity: function mintBatch(address _to, uint256[] _ids, uint256[] _values) returns()
func (_Kip37 *Kip37Session) MintBatch(_to common.Address, _ids []*big.Int, _values []*big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.MintBatch(&_Kip37.TransactOpts, _to, _ids, _values)
}

// MintBatch is a paid mutator transaction binding the contract method 0xd81d0a15.
//
// Solidity: function mintBatch(address _to, uint256[] _ids, uint256[] _values) returns()
func (_Kip37 *Kip37TransactorSession) MintBatch(_to common.Address, _ids []*big.Int, _values []*big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.MintBatch(&_Kip37.TransactOpts, _to, _ids, _values)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 _id) returns()
func (_Kip37 *Kip37Transactor) Pause(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "pause", _id)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 _id) returns()
func (_Kip37 *Kip37Session) Pause(_id *big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Pause(&_Kip37.TransactOpts, _id)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 _id) returns()
func (_Kip37 *Kip37TransactorSession) Pause(_id *big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Pause(&_Kip37.TransactOpts, _id)
}

// Pause0 is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Kip37 *Kip37Transactor) Pause0(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "pause0")
}

// Pause0 is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Kip37 *Kip37Session) Pause0() (*types.Transaction, error) {
	return _Kip37.Contract.Pause0(&_Kip37.TransactOpts)
}

// Pause0 is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_Kip37 *Kip37TransactorSession) Pause0() (*types.Transaction, error) {
	return _Kip37.Contract.Pause0(&_Kip37.TransactOpts)
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_Kip37 *Kip37Transactor) RenounceMinter(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "renounceMinter")
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_Kip37 *Kip37Session) RenounceMinter() (*types.Transaction, error) {
	return _Kip37.Contract.RenounceMinter(&_Kip37.TransactOpts)
}

// RenounceMinter is a paid mutator transaction binding the contract method 0x98650275.
//
// Solidity: function renounceMinter() returns()
func (_Kip37 *Kip37TransactorSession) RenounceMinter() (*types.Transaction, error) {
	return _Kip37.Contract.RenounceMinter(&_Kip37.TransactOpts)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_Kip37 *Kip37Transactor) RenouncePauser(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "renouncePauser")
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_Kip37 *Kip37Session) RenouncePauser() (*types.Transaction, error) {
	return _Kip37.Contract.RenouncePauser(&_Kip37.TransactOpts)
}

// RenouncePauser is a paid mutator transaction binding the contract method 0x6ef8d66d.
//
// Solidity: function renouncePauser() returns()
func (_Kip37 *Kip37TransactorSession) RenouncePauser() (*types.Transaction, error) {
	return _Kip37.Contract.RenouncePauser(&_Kip37.TransactOpts)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Kip37 *Kip37Transactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Kip37 *Kip37Session) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Kip37.Contract.SafeBatchTransferFrom(&_Kip37.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_Kip37 *Kip37TransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _Kip37.Contract.SafeBatchTransferFrom(&_Kip37.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Kip37 *Kip37Transactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Kip37 *Kip37Session) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Kip37.Contract.SafeTransferFrom(&_Kip37.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_Kip37 *Kip37TransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _Kip37.Contract.SafeTransferFrom(&_Kip37.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Kip37 *Kip37Transactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Kip37 *Kip37Session) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Kip37.Contract.SetApprovalForAll(&_Kip37.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_Kip37 *Kip37TransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _Kip37.Contract.SetApprovalForAll(&_Kip37.TransactOpts, operator, approved)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Kip37 *Kip37Transactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Kip37 *Kip37Session) Unpause() (*types.Transaction, error) {
	return _Kip37.Contract.Unpause(&_Kip37.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_Kip37 *Kip37TransactorSession) Unpause() (*types.Transaction, error) {
	return _Kip37.Contract.Unpause(&_Kip37.TransactOpts)
}

// Unpause0 is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 _id) returns()
func (_Kip37 *Kip37Transactor) Unpause0(opts *bind.TransactOpts, _id *big.Int) (*types.Transaction, error) {
	return _Kip37.contract.Transact(opts, "unpause0", _id)
}

// Unpause0 is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 _id) returns()
func (_Kip37 *Kip37Session) Unpause0(_id *big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Unpause0(&_Kip37.TransactOpts, _id)
}

// Unpause0 is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 _id) returns()
func (_Kip37 *Kip37TransactorSession) Unpause0(_id *big.Int) (*types.Transaction, error) {
	return _Kip37.Contract.Unpause0(&_Kip37.TransactOpts, _id)
}

// Kip37ApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the Kip37 contract.
type Kip37ApprovalForAllIterator struct {
	Event *Kip37ApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37ApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37ApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37ApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37ApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37ApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37ApprovalForAll represents a ApprovalForAll event raised by the Kip37 contract.
type Kip37ApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Kip37 *Kip37Filterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*Kip37ApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &Kip37ApprovalForAllIterator{contract: _Kip37.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Kip37 *Kip37Filterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *Kip37ApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37ApprovalForAll)
				if err := _Kip37.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_Kip37 *Kip37Filterer) ParseApprovalForAll(log types.Log) (*Kip37ApprovalForAll, error) {
	event := new(Kip37ApprovalForAll)
	if err := _Kip37.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37MinterAddedIterator is returned from FilterMinterAdded and is used to iterate over the raw logs and unpacked data for MinterAdded events raised by the Kip37 contract.
type Kip37MinterAddedIterator struct {
	Event *Kip37MinterAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37MinterAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37MinterAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37MinterAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37MinterAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37MinterAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37MinterAdded represents a MinterAdded event raised by the Kip37 contract.
type Kip37MinterAdded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinterAdded is a free log retrieval operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_Kip37 *Kip37Filterer) FilterMinterAdded(opts *bind.FilterOpts, account []common.Address) (*Kip37MinterAddedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "MinterAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return &Kip37MinterAddedIterator{contract: _Kip37.contract, event: "MinterAdded", logs: logs, sub: sub}, nil
}

// WatchMinterAdded is a free log subscription operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_Kip37 *Kip37Filterer) WatchMinterAdded(opts *bind.WatchOpts, sink chan<- *Kip37MinterAdded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "MinterAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37MinterAdded)
				if err := _Kip37.contract.UnpackLog(event, "MinterAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterAdded is a log parse operation binding the contract event 0x6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f6.
//
// Solidity: event MinterAdded(address indexed account)
func (_Kip37 *Kip37Filterer) ParseMinterAdded(log types.Log) (*Kip37MinterAdded, error) {
	event := new(Kip37MinterAdded)
	if err := _Kip37.contract.UnpackLog(event, "MinterAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37MinterRemovedIterator is returned from FilterMinterRemoved and is used to iterate over the raw logs and unpacked data for MinterRemoved events raised by the Kip37 contract.
type Kip37MinterRemovedIterator struct {
	Event *Kip37MinterRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37MinterRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37MinterRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37MinterRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37MinterRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37MinterRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37MinterRemoved represents a MinterRemoved event raised by the Kip37 contract.
type Kip37MinterRemoved struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterMinterRemoved is a free log retrieval operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_Kip37 *Kip37Filterer) FilterMinterRemoved(opts *bind.FilterOpts, account []common.Address) (*Kip37MinterRemovedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "MinterRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return &Kip37MinterRemovedIterator{contract: _Kip37.contract, event: "MinterRemoved", logs: logs, sub: sub}, nil
}

// WatchMinterRemoved is a free log subscription operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_Kip37 *Kip37Filterer) WatchMinterRemoved(opts *bind.WatchOpts, sink chan<- *Kip37MinterRemoved, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "MinterRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37MinterRemoved)
				if err := _Kip37.contract.UnpackLog(event, "MinterRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterRemoved is a log parse operation binding the contract event 0xe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb66692.
//
// Solidity: event MinterRemoved(address indexed account)
func (_Kip37 *Kip37Filterer) ParseMinterRemoved(log types.Log) (*Kip37MinterRemoved, error) {
	event := new(Kip37MinterRemoved)
	if err := _Kip37.contract.UnpackLog(event, "MinterRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37PausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the Kip37 contract.
type Kip37PausedIterator struct {
	Event *Kip37Paused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37PausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37Paused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37Paused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37PausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37PausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37Paused represents a Paused event raised by the Kip37 contract.
type Kip37Paused struct {
	TokenId *big.Int
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xabdb1c9133626eb4f8c5f2ec7e3c60a969a2fb148a0c341a3cf6597242c8f8f5.
//
// Solidity: event Paused(uint256 tokenId, address account)
func (_Kip37 *Kip37Filterer) FilterPaused(opts *bind.FilterOpts) (*Kip37PausedIterator, error) {

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &Kip37PausedIterator{contract: _Kip37.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xabdb1c9133626eb4f8c5f2ec7e3c60a969a2fb148a0c341a3cf6597242c8f8f5.
//
// Solidity: event Paused(uint256 tokenId, address account)
func (_Kip37 *Kip37Filterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *Kip37Paused) (event.Subscription, error) {

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37Paused)
				if err := _Kip37.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xabdb1c9133626eb4f8c5f2ec7e3c60a969a2fb148a0c341a3cf6597242c8f8f5.
//
// Solidity: event Paused(uint256 tokenId, address account)
func (_Kip37 *Kip37Filterer) ParsePaused(log types.Log) (*Kip37Paused, error) {
	event := new(Kip37Paused)
	if err := _Kip37.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37Paused0Iterator is returned from FilterPaused0 and is used to iterate over the raw logs and unpacked data for Paused0 events raised by the Kip37 contract.
type Kip37Paused0Iterator struct {
	Event *Kip37Paused0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37Paused0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37Paused0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37Paused0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37Paused0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37Paused0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37Paused0 represents a Paused0 event raised by the Kip37 contract.
type Kip37Paused0 struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused0 is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Kip37 *Kip37Filterer) FilterPaused0(opts *bind.FilterOpts) (*Kip37Paused0Iterator, error) {

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "Paused0")
	if err != nil {
		return nil, err
	}
	return &Kip37Paused0Iterator{contract: _Kip37.contract, event: "Paused0", logs: logs, sub: sub}, nil
}

// WatchPaused0 is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Kip37 *Kip37Filterer) WatchPaused0(opts *bind.WatchOpts, sink chan<- *Kip37Paused0) (event.Subscription, error) {

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "Paused0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37Paused0)
				if err := _Kip37.contract.UnpackLog(event, "Paused0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused0 is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_Kip37 *Kip37Filterer) ParsePaused0(log types.Log) (*Kip37Paused0, error) {
	event := new(Kip37Paused0)
	if err := _Kip37.contract.UnpackLog(event, "Paused0", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37PauserAddedIterator is returned from FilterPauserAdded and is used to iterate over the raw logs and unpacked data for PauserAdded events raised by the Kip37 contract.
type Kip37PauserAddedIterator struct {
	Event *Kip37PauserAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37PauserAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37PauserAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37PauserAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37PauserAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37PauserAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37PauserAdded represents a PauserAdded event raised by the Kip37 contract.
type Kip37PauserAdded struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserAdded is a free log retrieval operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_Kip37 *Kip37Filterer) FilterPauserAdded(opts *bind.FilterOpts, account []common.Address) (*Kip37PauserAddedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return &Kip37PauserAddedIterator{contract: _Kip37.contract, event: "PauserAdded", logs: logs, sub: sub}, nil
}

// WatchPauserAdded is a free log subscription operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_Kip37 *Kip37Filterer) WatchPauserAdded(opts *bind.WatchOpts, sink chan<- *Kip37PauserAdded, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "PauserAdded", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37PauserAdded)
				if err := _Kip37.contract.UnpackLog(event, "PauserAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserAdded is a log parse operation binding the contract event 0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8.
//
// Solidity: event PauserAdded(address indexed account)
func (_Kip37 *Kip37Filterer) ParsePauserAdded(log types.Log) (*Kip37PauserAdded, error) {
	event := new(Kip37PauserAdded)
	if err := _Kip37.contract.UnpackLog(event, "PauserAdded", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37PauserRemovedIterator is returned from FilterPauserRemoved and is used to iterate over the raw logs and unpacked data for PauserRemoved events raised by the Kip37 contract.
type Kip37PauserRemovedIterator struct {
	Event *Kip37PauserRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37PauserRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37PauserRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37PauserRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37PauserRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37PauserRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37PauserRemoved represents a PauserRemoved event raised by the Kip37 contract.
type Kip37PauserRemoved struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPauserRemoved is a free log retrieval operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_Kip37 *Kip37Filterer) FilterPauserRemoved(opts *bind.FilterOpts, account []common.Address) (*Kip37PauserRemovedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return &Kip37PauserRemovedIterator{contract: _Kip37.contract, event: "PauserRemoved", logs: logs, sub: sub}, nil
}

// WatchPauserRemoved is a free log subscription operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_Kip37 *Kip37Filterer) WatchPauserRemoved(opts *bind.WatchOpts, sink chan<- *Kip37PauserRemoved, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "PauserRemoved", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37PauserRemoved)
				if err := _Kip37.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRemoved is a log parse operation binding the contract event 0xcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e.
//
// Solidity: event PauserRemoved(address indexed account)
func (_Kip37 *Kip37Filterer) ParsePauserRemoved(log types.Log) (*Kip37PauserRemoved, error) {
	event := new(Kip37PauserRemoved)
	if err := _Kip37.contract.UnpackLog(event, "PauserRemoved", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37TransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the Kip37 contract.
type Kip37TransferBatchIterator struct {
	Event *Kip37TransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37TransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37TransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37TransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37TransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37TransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37TransferBatch represents a TransferBatch event raised by the Kip37 contract.
type Kip37TransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Kip37 *Kip37Filterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*Kip37TransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Kip37TransferBatchIterator{contract: _Kip37.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Kip37 *Kip37Filterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *Kip37TransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37TransferBatch)
				if err := _Kip37.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_Kip37 *Kip37Filterer) ParseTransferBatch(log types.Log) (*Kip37TransferBatch, error) {
	event := new(Kip37TransferBatch)
	if err := _Kip37.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37TransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the Kip37 contract.
type Kip37TransferSingleIterator struct {
	Event *Kip37TransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37TransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37TransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37TransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37TransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37TransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37TransferSingle represents a TransferSingle event raised by the Kip37 contract.
type Kip37TransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Kip37 *Kip37Filterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*Kip37TransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &Kip37TransferSingleIterator{contract: _Kip37.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Kip37 *Kip37Filterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *Kip37TransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37TransferSingle)
				if err := _Kip37.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_Kip37 *Kip37Filterer) ParseTransferSingle(log types.Log) (*Kip37TransferSingle, error) {
	event := new(Kip37TransferSingle)
	if err := _Kip37.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37URIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the Kip37 contract.
type Kip37URIIterator struct {
	Event *Kip37URI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37URIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37URI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37URI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37URIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37URIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37URI represents a URI event raised by the Kip37 contract.
type Kip37URI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Kip37 *Kip37Filterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*Kip37URIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &Kip37URIIterator{contract: _Kip37.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Kip37 *Kip37Filterer) WatchURI(opts *bind.WatchOpts, sink chan<- *Kip37URI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37URI)
				if err := _Kip37.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_Kip37 *Kip37Filterer) ParseURI(log types.Log) (*Kip37URI, error) {
	event := new(Kip37URI)
	if err := _Kip37.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37UnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the Kip37 contract.
type Kip37UnpausedIterator struct {
	Event *Kip37Unpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37UnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37Unpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37Unpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37UnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37UnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37Unpaused represents a Unpaused event raised by the Kip37 contract.
type Kip37Unpaused struct {
	TokenId *big.Int
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0xfe9b5e5216db9de81757f43d20f846bea509c040a560d136b8263dd8cd764238.
//
// Solidity: event Unpaused(uint256 tokenId, address account)
func (_Kip37 *Kip37Filterer) FilterUnpaused(opts *bind.FilterOpts) (*Kip37UnpausedIterator, error) {

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &Kip37UnpausedIterator{contract: _Kip37.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0xfe9b5e5216db9de81757f43d20f846bea509c040a560d136b8263dd8cd764238.
//
// Solidity: event Unpaused(uint256 tokenId, address account)
func (_Kip37 *Kip37Filterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *Kip37Unpaused) (event.Subscription, error) {

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37Unpaused)
				if err := _Kip37.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0xfe9b5e5216db9de81757f43d20f846bea509c040a560d136b8263dd8cd764238.
//
// Solidity: event Unpaused(uint256 tokenId, address account)
func (_Kip37 *Kip37Filterer) ParseUnpaused(log types.Log) (*Kip37Unpaused, error) {
	event := new(Kip37Unpaused)
	if err := _Kip37.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	return event, nil
}

// Kip37Unpaused0Iterator is returned from FilterUnpaused0 and is used to iterate over the raw logs and unpacked data for Unpaused0 events raised by the Kip37 contract.
type Kip37Unpaused0Iterator struct {
	Event *Kip37Unpaused0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log      // Log channel receiving the found contract events
	sub  klaytn.Subscription // Subscription for errors, completion and termination
	done bool                // Whether the subscription completed delivering logs
	fail error               // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Kip37Unpaused0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Kip37Unpaused0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Kip37Unpaused0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Kip37Unpaused0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Kip37Unpaused0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Kip37Unpaused0 represents a Unpaused0 event raised by the Kip37 contract.
type Kip37Unpaused0 struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused0 is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Kip37 *Kip37Filterer) FilterUnpaused0(opts *bind.FilterOpts) (*Kip37Unpaused0Iterator, error) {

	logs, sub, err := _Kip37.contract.FilterLogs(opts, "Unpaused0")
	if err != nil {
		return nil, err
	}
	return &Kip37Unpaused0Iterator{contract: _Kip37.contract, event: "Unpaused0", logs: logs, sub: sub}, nil
}

// WatchUnpaused0 is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Kip37 *Kip37Filterer) WatchUnpaused0(opts *bind.WatchOpts, sink chan<- *Kip37Unpaused0) (event.Subscription, error) {

	logs, sub, err := _Kip37.contract.WatchLogs(opts, "Unpaused0")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Kip37Unpaused0)
				if err := _Kip37.contract.UnpackLog(event, "Unpaused0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused0 is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_Kip37 *Kip37Filterer) ParseUnpaused0(log types.Log) (*Kip37Unpaused0, error) {
	event := new(Kip37Unpaused0)
	if err := _Kip37.contract.UnpackLog(event, "Unpaused0", log); err != nil {
		return nil, err
	}
	return event, nil
}
